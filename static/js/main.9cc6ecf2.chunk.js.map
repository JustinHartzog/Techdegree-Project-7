{"version":3,"sources":["components/Search.js","components/Header.js","components/Nav.js","components/Image.js","components/ImageList.js","components/Error.js","config.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchForm","state","searchText","onSearchChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","onSearch","userSearch","path","result","concat","history","push","currentTarget","reset","_this2","this","react_default","a","createElement","className","onSubmit","type","onChange","name","ref","input","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Search_SearchForm","Nav","NavLink","to","Image","src","farm","serverID","id","secret","alt","ImageList","images","data","map","image","components_Image","server","key","Error","apiKey","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","performSearch","arguments","length","undefined","axios","get","then","response","pictures","photos","photo","loading","catch","error","console","log","sunsetSearch","sunsets","waterfallSearch","waterfalls","mountainSearch","mountains","BrowserRouter","basename","Route","render","components_Header","components_Nav","exact","component","components_ImageList","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cc6ecf2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class SearchForm extends Component {\r\n\r\n  state = {\r\n    searchText: ''\r\n  }\r\n\r\n  onSearchChange = e => {\r\n    this.setState({searchText: e.target.value});\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSearch(this.userSearch.value);\r\n    let path = this.userSearch.value;\r\n    let result = `/search/${path}`;\r\n    this.props.history.push(result);\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <form className='search-form' onSubmit={this.handleSubmit}>\r\n        <input type='search' onChange={this.onSearchChange} name='search' ref={(input) => this.userSearch = input} placeholder='search' required/>\r\n          <button type='submit' className=\"search-button\">\r\n            <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n            </svg>\r\n          </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Search from './Search'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n         <header>\r\n         <h2>Search And Be Amazed!</h2>\r\n         <Search onSearch={props.onSearch} history={props.history}/> \r\n         </header>\r\n     )\r\n };\r\n\r\nexport default withRouter(Header);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Nav = () => (\r\n  <nav className=\"main-nav\">\r\n    <ul>\r\n      <li><NavLink to='/sunsets'>Sunsets</NavLink></li>\r\n      <li><NavLink to='/waterfalls'>Waterfalls</NavLink></li>\r\n      <li><NavLink to='/mountains'>Mountains</NavLink></li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nconst Image = props => (\r\n  <li>\r\n    <img src={`https://farm${props.farm}.staticflickr.com/${props.serverID}/${props.id}_${props.secret}.jpg`} alt=''/>\r\n  </li>\r\n);\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport Image from './Image';\r\n\r\n\r\nconst ImageList = props => {\r\n\r\n  const results = props.data;\r\n  let images = results.map(image =>\r\n    <Image farm={image.farm}\r\n              serverID={image.server}\r\n              id={image.id}\r\n              secret={image.secret}\r\n              key={image.id} />\r\n  )\r\n\r\n  return(\r\n    <div className=\"photo-container\">\r\n      <ul>\r\n        {images}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageList;\r\n","import React from 'react';\r\n\r\nconst Error = () => (\r\n  <div >\r\n    <h2>Page Not Found</h2>\r\n      <p>The search did not return any results, please try again</p>\r\n  </div>\r\n);\r\n\r\nexport default Error;\r\n","const apiKey = \"b42ba8f10d6fa45dc9e47e4762f98cc9\";\r\nexport default apiKey;\r\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Nav from \"./Nav\";\nimport ImageList from './ImageList';\nimport Error from './Error';\nimport axios from 'axios';\nimport apiKey from '../config';\nimport {\n  BrowserRouter,\n  Route,\n} from 'react-router-dom'\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      pictures: [],\n      sunsets: [],\n      waterfalls: [],\n      mountains: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.performSearch();\n    this.sunsetSearch();\n    this.waterfallSearch();\n    this.mountainSearch();\n  }\n\n  performSearch = (userSearch = 'sunsets') => {\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${userSearch}&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => {\n        this.setState({\n          pictures: response.data.photos.photo,\n          loading: false\n        })\n      })\n      .catch(error=> {\n        console.log('Error fetching and parsing data', error);\n      })\n  }\n\n  sunsetSearch = (userSearch = 'sunsets') => {\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${userSearch}&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => {\n        this.setState({\n          sunsets: response.data.photos.photo,\n          loading: false\n        })\n      })\n      .catch(error=> {\n        console.log('Error fetching data', error);\n      })\n    }\n\n    waterfallSearch = (userSearch = 'waterfalls') => {\n      axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${userSearch}&per_page=24&format=json&nojsoncallback=1`)\n        .then(response => {\n          this.setState({\n            waterfalls: response.data.photos.photo,\n            loading: false\n          })\n        })\n        .catch(error=> {\n          console.log('Error fetching data', error);\n        })\n      }\n\n    mountainSearch = (userSearch = 'mountains') => {\n      axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${userSearch}&per_page=24&format=json&nojsoncallback=1`)\n        .then(response => {\n          this.setState({\n            mountains: response.data.photos.photo,\n            loading: false\n          })\n        })\n        .catch(error=> {\n          console.log('Error fetching data', error);\n        })\n      }\n\n      render() {\n      return (\n          <BrowserRouter basename=\"/Techdegree-Project-7\">\n          <div className=\"container\">\n            <Route path=\"/\" render={() => <Header onSearch={this.performSearch} /> } />\n            <Nav />\n            <Route exact path=\"/\" component={ () => <ImageList data={this.state.pictures} /> }></Route>\n            <Route exact path=\"/search/:image\" component={ () => <ImageList data={this.state.pictures} /> }></Route>\n            <Route exact path=\"/sunsets\" component={ () => <ImageList data={this.state.sunsets} /> }></Route>\n            <Route exact path=\"/waterfalls\" component={ () => <ImageList data={this.state.waterfalls} /> }></Route>\n            <Route exact path=\"/mountains\" component={ () => <ImageList data={this.state.mountains} /> }></Route>\n            <Route component={Error} />\n          </div>\n          </BrowserRouter>\n      )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}